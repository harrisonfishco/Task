@page "/Lookups"
@using Microsoft.EntityFrameworkCore;
@using Task.Components.Shared;
@using Task.Lookup;
@using TTask.TaskTree;
@inject Session session;
@inject IDbContextFactory<Context> ContextFactory;
@inject NavigationManager NavigationManager;

<PageTitle>Task - Lookup Definitions</PageTitle>

<h1>Lookup Definitions</h1>
<TaskSection Title="Lookup Definitions" NoPadding="true">
    <div class="lookup-container">
        <TaskTree RootNodes="@RootNodes" OnSelect="@OnTreeItemClick" />
        <div class="lookup-body">
            <TaskGrid PrimaryObject="@PO" DefaultObject="defaultObject" @ref="grid"/>
        </div>
    </div>
</TaskSection>

@code {
    public TTask.TaskTree.TaskTreeNodeCollection RootNodes = new TaskTreeNodeCollection();
    public TTask.TaskTree.TaskTreeNodeCollection test = new TaskTreeNodeCollection();

    public List<TaskLookupValue> PO { get; set; } = new List<TaskLookupValue>();

    public TaskGrid<TaskLookupValue> grid;

    private TaskLookupValue defaultObject = new TaskLookupValue();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string userRole = string.Empty;

        if(TaskCache.ContainsKey("TASKUSER_ROLE"))
        {
            userRole = TaskCache.GetKey("TASKUSER_ROLE")!;
        }
        else
        {
            Guid sessionId = await session.GetSessionId();

            if(firstRender)
            {
                using(Context context = ContextFactory.CreateDbContext())
                {
                    TaskUserSession? sess = await context.TaskUserSessions.Where(s => s.UserSessionGu == sessionId).FirstOrDefaultAsync();

                    if(TypeCheck.NotEmpty(sess))
                    {
                        TaskUser? u = await context.TaskUsers.Where(u => u.UserGu == sess.UserGu).FirstOrDefaultAsync();
                        if(TypeCheck.Empty(u))
                        {
                            NavigationManager.NavigateTo("/Login");
                        }
                        else
                        {
                            userRole = u.Role;
                        }
                    }
                }
            }
        }

        if(firstRender && userRole != "0") //Making sure user is admin
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void OnTreeItemClick(TaskTreeEventArgs e)
    {
        Console.WriteLine(e.Item);
    }

    protected override async Task OnInitializedAsync()
    {
        List<TaskLookup> lookups = new List<TaskLookup>();
        TaskTreeNodeCollection treeNodes = new TaskTreeNodeCollection();
        using(Context context = ContextFactory.CreateDbContext())
        {
            await context.TaskLookups.ForEachAsync(l =>
            {
                lookups.Add(l);
            });

            TaskLookup roles = await context.TaskLookups.Include(l => l.TaskLookupValues)
                .Where(l => l.Name == "Task.Roles")
                .FirstAsync();

            defaultObject.LookupGu = roles.LookupGu;

            PO = roles.TaskLookupValues.OrderBy(l => l.Code)
                .ToList();

        }

        lookups.ForEach(l =>
        {
            RootNodes.AddPath(l.Name);
        });

        StateHasChanged();
    }
}
