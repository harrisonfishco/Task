@typeparam T
@inherits InputBase<T>

<div>
    @if(Label != string.Empty)
    {
        <label for="@instance">@Label</label>
    }
    <input id="@instance" type="@GetInputType()" @bind="@CurrentValue" placeholder="@Placeholder" class="@Class" disabled="@Disabled" @oninput="HandleInput"/>
</div>

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public InputType Type { get; set; } = InputType.Default;

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string? Class { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    private Guid instance = Guid.NewGuid();

    private async Task HandleInput(ChangeEventArgs e)
    {
        if (OnInput.HasDelegate)
        {
            await OnInput.InvokeAsync(e);
        }
    }

    private string GetInputType()
    {
        string res = string.Empty;
        switch(Type)
        {
            default:
            case InputType.Default:
                res = "text";
                break;
            case InputType.Password:
                res = "password";
                break;
            case InputType.Integer:
                res = "number";
                break;
            case InputType.Float:
                res = "number";
                break;
            case InputType.Short:
                res = "number";
                break;
            case InputType.Double:
                res = "number";
                break;
        }
        return res;
    }

    protected override bool TryParseValueFromString(string value, out T result, out string validationErrorMessage)
    {
        bool res = false;
        result = default;
        validationErrorMessage = null;
        try
        {
            if (result is string)
            {
                result = (T)(object)value;
                res = true;
            }
            else if (result is int)
            {
                if (int.TryParse(value, out int intValue))
                {
                    result = (T)(object)intValue;
                    res = true;
                }
            }
            else if (result is double)
            {
                if (double.TryParse(value, out double doubleValue))
                {
                    result = (T)(object)doubleValue;
                    res = true;
                }
            }
            else if (result is short)
            {
                if (short.TryParse(value, out short shortValue))
                {
                    result = (T)(object)shortValue;
                    res = true;
                }
            }
            else if (result is float)
            {
                if (float.TryParse(value, out float floatValue))
                {
                    result = (T)(object)floatValue;
                    res = true;
                }
            }
            else 
            {
                throw new NotSupportedException($"Type {typeof(T).Name} is not supported");
            }

            result = default;
        }
        catch (Exception)
        {
            result = default;
            validationErrorMessage = "The input is not valid.";
        }
        return res;
    }

    public enum InputType
    {
        Default,
        Password,
        Integer,
        Float,
        Short,
        Double,
    }
}
