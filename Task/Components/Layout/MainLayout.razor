@using Microsoft.EntityFrameworkCore;
@using Task.Components.Shared;
@inherits LayoutComponentBase
@inject IDbContextFactory<Context> ContextFactory;
@inject Session session;
@inject NavigationManager NavigationManager;

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <button style="margin: 4px" id="submit" value="Logout" @onclick="OnLogout">Logout</button>
        </div>

        <article class="content px-4">
            <ErrorBoundary @ref="errorBoundary">
                <ChildContent>
                    @Body
                    @ChildContent
                </ChildContent>
                <ErrorContent Context="Exception">
                    <TaskModal Title="Error" Text="@Exception.Message" OnClose="@OnErrorDialogClose" DialogType="TaskModal.ModalDialogType.Ok"></TaskModal>
                </ErrorContent>
            </ErrorBoundary>
        </article>
    </main>
</div>


@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private ErrorBoundary? errorBoundary;

    private void OnErrorDialogClose(bool accepted)
    {
        StateHasChanged();
    }

    /// <summary>
    /// Current logged in user
    /// </summary>
    public TaskUser? User { get; private set; }

    // Checks if user is logged in
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Guid sessionId = await session.GetSessionId();

        using (Context ctx = ContextFactory.CreateDbContext())
        {
            TaskUserSession? sess = await ctx.TaskUserSessions.Where(s => s.UserSessionGu == sessionId).FirstOrDefaultAsync();

            if(TypeCheck.Empty(sess))
            {
                NavigationManager.NavigateTo("/Login");
            }
            else
            {
                User = await ctx.TaskUsers.Where(u => u.UserGu == sess!.UserGu).FirstOrDefaultAsync();
            }
        }
    }

    private async void OnLogout()
    {
        await session.DeleteSession();
    }

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

}