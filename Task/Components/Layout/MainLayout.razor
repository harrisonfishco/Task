@using Microsoft.EntityFrameworkCore;
@using Task.Components.Shared;
@inherits LayoutComponentBase
@inject IDbContextFactory<Context> ContextFactory;
@inject Session session;
@inject NavigationManager NavigationManager;

<div class="page">

    <div class="wrapper">
        <div class="sidebar">
            <SideBarNavMenu />
        </div>
        <div class="main-area">
            <div class="topbar">
                <NavMenu />
            </div>
            <main>
                <article class="content px-4">
                    <ErrorBoundary @ref="errorBoundary">
                        <ChildContent>
                            @Body
                        </ChildContent>
                        <ErrorContent Context="Exception">
                            <TaskModal Title="Error" Text="@Exception.Message" OnClose="@OnErrorDialogClose" DialogType="TaskModal.ModalDialogType.Ok"></TaskModal>
                        </ErrorContent>
                    </ErrorBoundary>
                </article>
            </main>
        </div>
    </div>


</div>


@code {

    private ErrorBoundary? errorBoundary;

    private void OnErrorDialogClose(bool accepted)
    {
        StateHasChanged();
    }

    // Checks if user is logged in
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Guid sessionId = await session.GetSessionId();

        using (Context ctx = ContextFactory.CreateDbContext())
        {
            TaskUserSession? sess = await ctx.TaskUserSessions.Where(s => s.UserSessionGu == sessionId).FirstOrDefaultAsync();

            if(TypeCheck.Empty(sess))
            {
                NavigationManager.NavigateTo("/Login");
            }
        }
    }

    private async void OnLogout()
    {
        await session.DeleteSession();
    }

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

}