@inherits LayoutComponentBase
@using Task.Login
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Task.Components.Shared;
@inject IDbContextFactory<Context> ContextFactory;
@inject Session session;
@inject NavigationManager NavigationManager;

<div class="login-container">
    <div class="login-box">
        <h1 class="login-title">Login</h1>
        <div class="login-form">
            <input @bind="Model.Username" id="username" placeholder="Username" class="login-input" />
            <input @bind="Model.Password" type="password" placeholder="Password" class="login-input" />
            <button id="submit" value="Login" class="login-button" @onclick="OnLogin">Login</button>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginParams Model { get; set; }

    //Checks if user is already logged in 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Guid sessionId = await session.GetSessionId();

        using (Context ctx = ContextFactory.CreateDbContext())
        {
            TaskUserSession? sess = await ctx.TaskUserSessions.Where(s => s.UserSessionGu == sessionId).FirstOrDefaultAsync();

            if(sess != null)
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    protected override void OnInitialized()
    {
        Model = new LoginParams();
    }

    private async void OnLogin()
    {
        using(Context ctx = ContextFactory.CreateDbContext())
        {
            bool canLogin = await ctx.VerifyUser(Model.Username, Model.Password);

            if(canLogin)
            {
                TaskUser user = await ctx.TaskUsers.FirstAsync(u => u.Username == Model.Username);

                TaskUserSession tus = new TaskUserSession();
                tus.TaskUser = user;
                tus.UserGu = user.UserGu;
                tus.AddTimestamp = DateTime.Now;

                await ctx.TaskUserSessions.AddAsync(tus);
                await ctx.SaveChangesAsync();

                Guid sessionId = tus.UserSessionGu;

                await session.SetSessionId(sessionId);

                NavigationManager.NavigateTo("/");
            }
            Model.Status = canLogin ? "Success" : "Error";
        }
    }

    public class LoginParams
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
        public string Status { get; set; }

        public LoginParams()
        {
            Status = string.Empty;
        }
    }

}